[
    {rdpproxy, [
        {frontend, [
            %%
            %% You can have multiple listeners running in different modes.
            %% One entry here per listener. Names are atoms.
            %%
            {default, [
                %%
                %% Port to listen on
                %%
                {port, 3389},

                %%
                %% The hostname that clients will connect to (must
                %% match the certificate under ssl_options)
                %%
                {hostname, <<"gs516-6440.eait.uq.edu.au">>},

                %%
                %% Domains to use with logins to backend servers
                %% The first item on this list will be the default
                %%
                {domains, [<<"KRB5.UQ.EDU.AU">>]},

                %%
                %% Allocation mode: nms_choice = look up user in NMS, present
                %% choose menu. pool = allocate from the pool of known machines.
                %%
                %{mode, nms_choice},
                %{mode, {pool, PoolName}},
                {mode, pool},

                %%
                %% Options for TLS from proxy => clients
                %%
                {ssl_options, [
                    %% Certificate we will use to secure communication with the clients
                    {certfile, "etc/cert.pem"},
                    {keyfile, "etc/key.pem"}
                ]}
            ]}
        ]},
        {ui, [
            %%
            %% Background colour for login screens
            %%
            {bg_colour, {16#49, 16#07, 16#5e}},

            %%
            %% Logo graphic (path relative to priv dir)
            %%
            {logo, "uq-logo.png"},

            %%
            %% Text for the "redirection not supported" error screen
            %%
            {title_noredir, <<"Sorry">>},
            {subtitle_noredir, <<"Redirection not supported">>},
            {msg_noredir, <<"It seems that your remote desktop client\n",
                           "does not support redirection, so it cannot\n",
                           "be used with EAIT remote access.">>},

            %%
            %% Text for the main login screen
            %%
            {title_login, <<"UQ Faculty of EAIT">>},
            {subtitle_login, <<"Staff Remote Access">>},
            {instruction_login, <<"Please enter your UQ username and password.">>},

            %%
            %% Text for the MFA prompt screen where users select a Duo device
            %%
            {title_mfa, <<"Multi-factor Authentication">>},
            {instruction_mfa, <<"Additional authentication with a device is required.\nPlease choose a device.">>},

            %%
            %% Text while waiting for Duo push / call
            %%
            {title_mfa_waiting, <<"Waiting for Duo">>},
            {instruction_mfa_waiting, <<"Please check your phone or device\n",
                                        "for a Duo Push prompt or call...\n">>},

            %%
            %% Text for the NMS chooser screen
            %%
            {title_choose, <<"Which computer?">>},
            {instruction_choose, <<"Please choose which computer to connect to:">>},

            %%
            %% Text for the pool chooser screen
            %%
            {title_choose_pool, <<"What type of computer?">>},
            {instruction_choose_pool, <<"You have access to more than one type of computer.\nPlease choose which type to connect to:">>},

            %%
            %% Error message when no machines are available on "choice" page
            %%
            {no_machines, <<"Sorry, we have no computers recorded as belonging to your\nuser (%USER%).\n\nIf you think this is incorrect, please email %HELPDESK%.">>},

            %%
            %% Error messages for different host problems
            %%
            {err_ssl, <<"Host has RDP TLS disabled, contact %HELPDESK%">>},
            {err_unreach, <<"Host appears to be off, trying to wake it up...">>},
            {err_refused, <<"Host not listening for RDP, contact %HELPDESK%">>},
            {err_cert, <<"Host has an invalid certificate, contact %HELPDESK%">>},
            {err_credssp_req, <<"Host requires CredSSP, contact %HELPDESK%">>},
            {err_other, <<"Error contacting host, contact %HELPDESK%">>},

            %%
            %% Helpdesk email, used in some error messages
            %%
            {helpdesk, <<"helpdesk@eait.uq.edu.au">>},

            %%
            %% ACL to grant access to the administrative options in the "choice"
            %% screen (explicit host selection, disable fwd creds)
            %%
            {admin_acl, [
                %%
                %% Allow a specific user by username
                %%
                %{allow, user, <<"xxx">>},

                %%
                %% Allow an AD group (if authing against AD and krb5 is
                %% configured to obtain a service ticket)
                %%
                %{allow, group, [1,5,21,123545676989,123,123,1]},

                %%
                %% Conditional rules
                %%
                %{branch, {'if', group, [1,5,21,...]}, [
                %    {allow, netmask, "1.2.3.4", 24}
                %]},

                %%
                %% Allow certs with a certain OU in a given slot
                %%
                %% Note that for admin_acl and pool ACLs, certificate rules
                %% can only match if Smartcard auth was used to log in (so
                %% a PIN check and full certificate validation has happened).
                %%
                %{allow, cert, piv_card_auth, dn_prefix, [{ou, <<"itig">>}]},

                %%
                %% Default-deny
                %%
                {deny, everybody}
            ]},

            %%
            %% ACL to grant access to the NMS menu in pool mode
            %%
            {pool_nms_acl, [
                %% See examples in admin_acl above
                {deny, everybody}
            ]}
        ]},
        {backend, [
            %%
            %% Options for TLS from proxy => backends
            %%
            {ssl_options, [
                %% Don't verify certs on backend servers
                {verify, verify_none}
            ]}
        ]},
        {http_api, [
            %%
            %% Port to listen on for HTTP API requests (to report backend machine
            %% status etc)
            %%
            {port, 8088},

            %%
            %% Who should be allowed to send status reports via the hypervisor
            %% API?
            %%
            {access_policy, [
                %%
                %% Allow localhost always
                %%
                {allow, net, {127, 0, 0, 0}, 16},
                %%
                %% Do reverse DNS lookup, require a particular suffix
                %%
                {require, dns_suffix, ".hv.labs.eait.uq.edu.au"},
                %%
                %% Only allow hosts on private IPs
                %%
                {require, rfc1918, true},
                %%
                %% Reporter must be in the same /16 as the subject it's
                %% reporting about
                %%
                {require, same_net, 16},
                %%
                %% Reporter's first DNS name component must be a prefix of the
                %% first DNS name component of the subject.
                %%
                {require, same_dns_prefix, 1, 1}
            ]}
        ]},
        {ra, [
            %%
            %% List of erlang nodes participating in the cluster
            %%
            %{nodes, [
            %    'rdpproxy@gs516-6440'
            %]},

            %%
            %% AES/HMAC keys for use protecting passwords in cookie storage
            %%
            {keys, [
                % { Key ref #, key (as a bignum) }
                {1, 16#9ce909408df2e85bf88ae7ce9db60c1a}
            ]}
        ]},
        {krb5,
            %%
            %% Defines the steps which should be followed to authenticate a
            %% user. You can use {all_of, []} and {any_of, []} to stack actions
            %% into different alternative options.
            %%
            {all_of, [
                %%
                %% Alternatives: we either want the user to log into
                %% KRB5.UQ.EDU.AU (and then we get a cross-realm TGT for them);
                %% or they can log in directly to EAIT.UQ.EDU.AU if that
                %% fails.
                %%
                {any_of, [
                    %% First alternative
                    {all_of, [
                        %%
                        %% The "authenticate" action attempts password
                        %% authentication against a KRB5 realm.
                        %%
                        {authenticate, [{realm, "KRB5.UQ.EDU.AU"}]},
                        %%
                        %% The "cross_realm" action uses the TGT from a
                        %% previous "authenticate" to get a TGT for a second,
                        %% different realm.
                        %%
                        {cross_realm, [{to_realm, "EAIT.UQ.EDU.AU"}]}
                    ]},
                    %% Second alternative
                    {authenticate, [{realm, "EAIT.UQ.EDU.AU"}]}
                ]},
                %%
                %% Gets a service ticket issued for a particular principal.
                %% Doesn't try to decrypt or validate it.
                %%
                {get_service_ticket, [
                    {principal, ["host", "rdp.eait.uq.edu.au"]}
                ]},
                %%
                %% Decrypts and validates the contents of a service ticket
                %% (using a service keytab which must contain keys for the
                %% last ticket we got).
                %%
                {check_service_ticket, [
                    {keytab, "etc/krb5.keytab"}
                ]},
                %%
                %% Extracts the Microsoft AD PAC from a service ticket and
                %% validates its contents. Also adds any group SIDs the user
                %% is a member of into the set of groups available for ACLs.
                %%
                {check_pac, [{required, true}]}
            ]}
        },
        {duo, [
            %%
            %% Details for Duo 2FA
            %%
            {integration_key, <<"aaaaaa">>},
            {secret_key, <<"aaaaaa">>},
            {api_host, "api-abc123.duosecurity.com"},

            %%
            %% Interpret "enroll" responses from Duo as bypass
            %%
            {enroll_is_allow, true},

            %%
            %% Lifetime of "remember me" entries in seconds
            %%
            {remember_time, 36000},

            %%
            %% Bypass Duo 2FA completely for users allowed by this ACL
            %%
            {bypass_acl, [
                %%
                %% Allow certs with CN=username under a specific DN tree
                %%
                %{branch, {'if', cert, piv_auth, dn_prefix, [
                %          {c, <<"AU">>}, {o, <<"The University of Queensland"},
                %          {ou, <<"Faculty of EAIT">>}]}, [
                %    {allow, cert, piv_auth, cn, user}
                %]},

                %%
                %% Allow members of an AD group if they have a valid cert for a
                %% particular account and are connecting from a particular net
                %%
                %{branch, {'if', group, [1,5,21,...]}, [
                %    {require, netmask, "10.55.0.0", 16},
                %    {allow, cert, any, upn, "account@domain.com"}
                %]},

                %%
                %% Duo for everybody else!
                %%
                {deny, everybody}
            ]}
        ]},
        {smartcard, [
            %%
            %% Path to CA certificate
            %%
            %{ca_cert, "/etc/ssl/certs/EAIT_Internal_CA.pem"},

            %%
            %% Max time to remember eboxed passwords for (sec)
            %%
            %{pw_cache_lifetime, 7776000},      % 90 days
        ]},
        {nms_api, [
            %%
            %% Options for talking to NMS (if using nms_choice mode, ignored
            %% in pool mode)
            %%
            %{api_host, "nms.eait.uq.edu.au"},
            %{key_id, <<"rdpproxy">>},
            %{privkey_path, "etc/nms_key.pem"}
        ]}
    ]},

    %%
    %% Detailed KRB5 client settings
    %%
    {kerlberos, [
        {realms, [
            %%
            %% Default settings which apply to all realms (but can be over-
            %% ridden per-realm below).
            %%
            {default, [
                %%
                %% Always/never use DNS discovery of KDCs (set to true to
                %% override a krb5.conf which has "dns_lookup_kdc = false"
                %%
                %{use_dns, true},

                %%
                %% Base timeout for abandoning requests to a KDC (msecs)
                %%
                %{timeout, 1000},

                %%
                %% Limit of total number of attempts to talk to a KDC
                %%
                %{retries, 3},

                %%
                %% Choose an explicit priority list for Kerberos etypes/ciphers.
                %%
                %{ciphers, [aes256_hmac_sha384, aes128_hmac_sha256,
                %           aes256_hmac_sha1, aes128_hmac_sha1, rc4_hmac]},
            ]},

            %%
            %% Override some settings for one realm
            %%
            {"SOME.REALM.COM", [
                %%
                %% Explicitly list KDCs for this realm
                %%
                %{kdc, ["kdc1.domain", {"kdc2.domain", 8888}]},
            ]}

            %%
            %% Note that kerlberos also parses settings from /etc/krb5.conf
            %% including realms with explicit KDCs.
            %%
        ]}
    ]},

    {rdp_lvgl, [
        %%
        %% The LVGL NIF will fork children to handle running LVGL code. Each
        %% child can handle multiple display instances at once. It is possible
        %% for displays which are running in the same child to block each
        %% others' rendering to some extent, and rendering is single-threaded
        %% within each child, so it is important to limit the maximum number
        %% of displays per child.
        %%
        %% Recommended range: 8-32
        %%
        {displays_per_child, 16},

        %%
        %% Maximum number of children to fork, and initial number to pre-fork at
        %% startup. If no children with spare display slots are available, we
        %% will fork new children up to child_procs_max. If we are already at
        %% child_procs_max, then lv:setup() will start returning errors.
        %%
        {child_procs_max, 8},
        {child_procs_init, 2},

        %%
        %% Maximum resolution of a single display. Display framebuffers are
        %% all allocated in advance at maximum resolution, so this controls the
        %% memory consumption of the NIF directly.
        %%
        {display_max_res, {3840, 2160}},

        %%
        %% Size of command and event rings which we use to exchange data with
        %% the child processes, in bytes.
        %%
        %% Recommended value: 16k (16384 bytes)
        %%
        {ring_size, 16384}
    ]},

    {lager, [
        {handlers, [
            {lager_console_backend, [{level, debug}]},
            {lager_file_backend, [{file, "console.log"}, {level, info}]},
            {lager_file_backend, [{file, "error.log"}, {level, error}]},
            {lager_file_backend, [{file, "debug.log"}, {level, debug}, {count, 10}]}
        ]},

        {crash_log, "crash.log"},
        {crash_log_date, "$D0"},
        {crash_log_count, 5},

        {error_logger_redirect, true}
    ]},

    {sasl, [
        {sasl_error_logger, false}
    ]}
].

